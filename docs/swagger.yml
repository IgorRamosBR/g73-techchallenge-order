openapi: 3.0.3
info:
  title: API de Realização de Pedidos -  /IgorRamosBR/g73-techchallenge-order
  description: |- 
    Este é um microsserviço responsável por criar produtos e gerenciar pedidos online para uma lanchonete. Ele oferece endpoints para criar, atualizar, buscar e listar pedidos, além de interagir com produtos e processar pagamentos.

    **Funcionalidades Principais:**

      - **Criar Pedido:** Permite que os clientes criem novos pedidos adicionando produtos ao carrinho.
      - **Atualizar Pedido:** Permite atualizar o status dos pedidos.
      - **Listar Pedidos:** Fornece uma lista de todos os pedidos, filtrada por diferentes critérios.
      - **Buscar Pedido por ID:** Permite buscar um pedido específico pelo seu ID.
      - **Gerar QR Code de Pagamento:** Gera um QR code para processar pagamentos dos pedidos.
    
    links úteis:
    - [Repositório do Projeto ](https://github.com/IgorRamosBR/IgorRamosBR/g73-techchallenge-order)
  version: 1.0.11
servers:
  - url: http://localhost:8080/v1/
tags:
  - name: products
    description: Operações sobre os produtos
  - name: orders
    description: Operações sobre as ordens de pedido e pagamento

paths:
  /products:
    post:
      tags:
        - products
      summary: Adicione um novo produto à loja
      description: Adicione um novo produto à loja
      operationId: createProduct
      requestBody:
        required: true
        description: Crie um novo produto na loja
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Combo 4"
                skuId:
                  type: string
                  example: "000006"
                description:
                  type: string
                  example: "Lanche, acompanhamento e bebida sortida"
                category:
                  type: string
                  example: "Combo"
                price:
                  type: number
                  format: double
                  example: 40.00
      responses:
        '200':
          description: 'OK'
          
    get:
      tags:
        - products
      summary: Buscar todos os produtos ou por categoria
      description: Procurar um produto por categoria
      operationId: GetProductsByCategory
      parameters:
      - in: query
        name: category
        schema:
          type: string
          example: 'Combo'
        required: false
      - in: query
        name: limit
        description: número de resultados por página
        schema:
          type: string
          example: '50'
        required: false
      - in: query
        name: offset
        description: número no qual os resultados devem se iniciar
        schema:
          type: string
          example: '40'
        required: false
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: integer
                          example: 4
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
                        name:
                          type: string
                          example: 'Combo 4'
                        skuId:
                          type: string
                          example: '000006'
                        description:
                          type: string
                          example: 'Lanche, acompanhament e bebida sortida'
                        category:
                          type: string
                          example: 'Combo'
                        price:
                          type: number
                          example: 40
         

  /product/{id}:
    put:
      tags:
        - products
      summary: Atualizar um produto existente
      description: Atualizar produto existente por ID
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: ID do produto que será deletado 
          required: true
          schema:
            type: integer
            format: int64
            example: 4
      requestBody:
        required: true
        description: Atualizar um produto existente na loja
        content:
          application/json:
            schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Batata frita"
                  skuId:
                    type: string
                    example: "000001"
                  description:
                    type: string
                    example: "Deliciosa batata frita"
                  category:
                    type: string
                    example: "Acompanhamento"
                  price:
                    type: number
                    format: double
                    example: 16.00
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Batata frita"
                  skuId:
                    type: string
                    example: "000001"
                  description:
                    type: string
                    example: "Deliciosa batata frita"
                  category:
                    type: string
                    example: "Acompanhamento"
                  price:
                    type: number
                    format: double
                    example: 16.00          
    delete:
      tags:
        - products
      summary: Deletar produto
      description: Delete um produto
      operationId: DeleteProduct por ID
      parameters:
        - name: id
          in: path
          description: Product ID a ser Deletado
          required: true
          schema:
            type: integer
            format: int64
            example: 4
      responses:
        '200':
          description: 'OK'
  
  
  
  
  /orders:
    post:
      tags:
        - orders
      summary: Criar um pedido
      description: Criar pedidos com itens unitários, combos prontos ou combos personalizados. Sendo que para os itens unitários e os combos prontos, a lista de productIds deverá conter apenas um único ID.
      operationId: createOrdersCustom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productIds:
                        type: array
                        items:
                          type: integer
                        example: [2, 3]
                      quantity:
                        type: integer
                        example: 2
                      type:
                        type: string
                        enum:
                          - UNIT
                          - COMBO
                          - CUSTOM_COMBO
                        example: "CUSTOM_COMBO"
                customerId:
                  type: integer
                  example: 1
                coupon:
                  type: string
                  example: "APP10"
                status:
                  type: string
                  enum:
                    - CREATED
                  example: "CREATED"
      responses:
        '200':
          description: 'OK'
    
    
    
    
    get:
      tags:
        - orders
      summary: Buscar pedidos cadastrados
      description: Buscar todos os pedidos cadastrados
      operationId: getAllOrders
      parameters:
      - in: query
        name: limit
        description: número de resultados por página
        schema:
          type: string
          example: '50'
        required: false
      - in: query
        name: offset
        description: número no qual os resultados devem se iniciar
        schema:
          type: string
          example: '30'
        required: false
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: number
                          example: 1
                        createdAt:
                          type: string
                          example: "2023-10-29T19:39:21.338373-03:00"
                        updatedAt:
                          type: string
                          example: "2023-10-29T19:39:21.338373-03:00"
                        items:
                          type: array
                          items:
                            type: object
                            properties:
                              ID:
                                type: number
                                example: 123
                              createdAt:
                                type: string
                                example: "2023-10-29T19:39:21.338373-03:00"
                              updatedAt:
                                type: string
                                example: "2023-10-29T19:39:21.338373-03:00"
                              products:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    ID:
                                      type: number
                                      example: 2
                                    createdAt:
                                      type: string
                                      example: "2023-10-29T19:39:21.338373-03:00"
                                    updatedAt:
                                      type: string
                                      example: "2023-10-29T19:39:21.338373-03:00"
                                    name:
                                      type: string
                                      example: "Nuggets"
                                    skuId:
                                      type: string
                                      example: "000002"
                                    description:
                                      type: string
                                      example: "Frango empanado"
                                    category:
                                      type: string
                                      example: "Acompanhamento"
                                    price:
                                      type: number
                                      example: 10.9
                              quantity:
                                type: integer
                                example: 2
                              type:
                                type: string
                                enum:
                                  - UNIT
                                  - COMBO
                                  - CUSTOM_COMBO
                                example: "UNIT"
                        coupon:
                          type: string
                          example: "APP10"
                        status:
                          type: string
                          enum:
                            - CREATED
                          example: "CREATED"
                  next:
                    type: number
                    example: 1
 
 

 
  /orders/{id}/status:
    get:
      tags:
        - orders
      summary: Burcar status do pedido
      description: Buscar pelo status do pedido através do seu respectivo id
      operationId: GetOrderStatus
      parameters:
        - name: id
          in: path
          description: ID 
          required: true
          schema:
            type: integer
            format: int64
            example: 4
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Batata frita"
                  skuId:
                    type: string
                    example: "000001"
                  description:
                    type: string
                    example: "Deliciosa batata frita"
                  category:
                    type: string
                    example: "Acompanhamento"
                  price:
                    type: number
                    format: double
                    example: 16.00    
    
    
    
    
  /orders/{id}/Status: 
   put:
      tags:
        - orders
      summary: Atualizar status do pedido
      description: Atualizar o status de um pedido através do seu id
      operationId: updateOrder
      parameters: 
        - name: id
          in: path
          description: ID do pedido
          required: true
          schema:
            type: integer
            format: int64
            example: 4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "CREATED|PAID|RECEIVED|IN_PROGRESS|READY|DONE"
      responses:
        '200':
          description: 'OK'
          