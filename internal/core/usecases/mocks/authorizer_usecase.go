// Code generated by MockGen. DO NOT EDIT.
// Source: authorizer_usecase.go
//
// Generated by this command:
//
//	mockgen -source=authorizer_usecase.go -destination=mocks/authorizer_usecase.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	reflect "reflect"

	dto "github.com/IgorRamosBR/g73-techchallenge-order/internal/core/usecases/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizerUsecase is a mock of AuthorizerUsecase interface.
type MockAuthorizerUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerUsecaseMockRecorder
}

// MockAuthorizerUsecaseMockRecorder is the mock recorder for MockAuthorizerUsecase.
type MockAuthorizerUsecaseMockRecorder struct {
	mock *MockAuthorizerUsecase
}

// NewMockAuthorizerUsecase creates a new mock instance.
func NewMockAuthorizerUsecase(ctrl *gomock.Controller) *MockAuthorizerUsecase {
	mock := &MockAuthorizerUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthorizerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizerUsecase) EXPECT() *MockAuthorizerUsecaseMockRecorder {
	return m.recorder
}

// AuthorizeUser mocks base method.
func (m *MockAuthorizerUsecase) AuthorizeUser(cpf string) (dto.AuthorizedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeUser", cpf)
	ret0, _ := ret[0].(dto.AuthorizedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeUser indicates an expected call of AuthorizeUser.
func (mr *MockAuthorizerUsecaseMockRecorder) AuthorizeUser(cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeUser", reflect.TypeOf((*MockAuthorizerUsecase)(nil).AuthorizeUser), cpf)
}
