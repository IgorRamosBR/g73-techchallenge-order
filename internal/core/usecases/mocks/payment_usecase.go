// Code generated by MockGen. DO NOT EDIT.
// Source: payment_usecase.go
//
// Generated by this command:
//
//	mockgen -source=payment_usecase.go -destination=mocks/payment_usecase.go
//

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	reflect "reflect"

	entities "github.com/g73-techchallenge-order/internal/core/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentUsecase is a mock of PaymentUsecase interface.
type MockPaymentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentUsecaseMockRecorder
}

// MockPaymentUsecaseMockRecorder is the mock recorder for MockPaymentUsecase.
type MockPaymentUsecaseMockRecorder struct {
	mock *MockPaymentUsecase
}

// NewMockPaymentUsecase creates a new mock instance.
func NewMockPaymentUsecase(ctrl *gomock.Controller) *MockPaymentUsecase {
	mock := &MockPaymentUsecase{ctrl: ctrl}
	mock.recorder = &MockPaymentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentUsecase) EXPECT() *MockPaymentUsecaseMockRecorder {
	return m.recorder
}

// GeneratePaymentQRCode mocks base method.
func (m *MockPaymentUsecase) GeneratePaymentQRCode(order entities.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePaymentQRCode", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePaymentQRCode indicates an expected call of GeneratePaymentQRCode.
func (mr *MockPaymentUsecaseMockRecorder) GeneratePaymentQRCode(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePaymentQRCode", reflect.TypeOf((*MockPaymentUsecase)(nil).GeneratePaymentQRCode), order)
}
