// Code generated by MockGen. DO NOT EDIT.
// Source: rowwrapper.go
//
// Generated by this command:
//
//	mockgen -source=rowwrapper.go -destination=mocks/rowwrapper.go
//

// Package mock_sql is a generated GoMock package.
package mock_sql

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRowWrapper is a mock of RowWrapper interface.
type MockRowWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockRowWrapperMockRecorder
}

// MockRowWrapperMockRecorder is the mock recorder for MockRowWrapper.
type MockRowWrapperMockRecorder struct {
	mock *MockRowWrapper
}

// NewMockRowWrapper creates a new mock instance.
func NewMockRowWrapper(ctrl *gomock.Controller) *MockRowWrapper {
	mock := &MockRowWrapper{ctrl: ctrl}
	mock.recorder = &MockRowWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowWrapper) EXPECT() *MockRowWrapperMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockRowWrapper) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockRowWrapperMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRowWrapper)(nil).Err))
}

// Scan mocks base method.
func (m *MockRowWrapper) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowWrapperMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRowWrapper)(nil).Scan), dest...)
}
