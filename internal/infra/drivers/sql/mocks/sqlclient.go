// Code generated by MockGen. DO NOT EDIT.
// Source: sqlclient.go
//
// Generated by this command:
//
//	mockgen -source=sqlclient.go -destination=mocks/sqlclient.go
//

// Package mock_sql is a generated GoMock package.
package mock_sql

import (
	sql "database/sql"
	reflect "reflect"

	sql0 "github.com/IgorRamosBR/g73-techchallenge-order/internal/infra/drivers/sql"
	gomock "go.uber.org/mock/gomock"
)

// MockSQLClient is a mock of SQLClient interface.
type MockSQLClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLClientMockRecorder
}

// MockSQLClientMockRecorder is the mock recorder for MockSQLClient.
type MockSQLClientMockRecorder struct {
	mock *MockSQLClient
}

// NewMockSQLClient creates a new mock instance.
func NewMockSQLClient(ctrl *gomock.Controller) *MockSQLClient {
	mock := &MockSQLClient{ctrl: ctrl}
	mock.recorder = &MockSQLClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLClient) EXPECT() *MockSQLClientMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockSQLClient) Begin() (sql0.TransactionWrapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(sql0.TransactionWrapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockSQLClientMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockSQLClient)(nil).Begin))
}

// Exec mocks base method.
func (m *MockSQLClient) Exec(query string, args ...any) (sql0.ResultWrapper, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql0.ResultWrapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockSQLClientMockRecorder) Exec(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockSQLClient)(nil).Exec), varargs...)
}

// ExecWithReturn mocks base method.
func (m *MockSQLClient) ExecWithReturn(query string, args ...any) sql0.RowWrapper {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecWithReturn", varargs...)
	ret0, _ := ret[0].(sql0.RowWrapper)
	return ret0
}

// ExecWithReturn indicates an expected call of ExecWithReturn.
func (mr *MockSQLClientMockRecorder) ExecWithReturn(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecWithReturn", reflect.TypeOf((*MockSQLClient)(nil).ExecWithReturn), varargs...)
}

// Find mocks base method.
func (m *MockSQLClient) Find(result any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{result, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockSQLClientMockRecorder) Find(result, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{result, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSQLClient)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockSQLClient) FindOne(result any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{result, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockSQLClientMockRecorder) FindOne(result, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{result, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockSQLClient)(nil).FindOne), varargs...)
}

// GetConnection mocks base method.
func (m *MockSQLClient) GetConnection() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockSQLClientMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockSQLClient)(nil).GetConnection))
}

// Ping mocks base method.
func (m *MockSQLClient) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockSQLClientMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSQLClient)(nil).Ping))
}
