// Code generated by MockGen. DO NOT EDIT.
// Source: transactionwrapper.go
//
// Generated by this command:
//
//	mockgen -source=transactionwrapper.go -destination=mocks/transactionwrapper.go
//

// Package mock_sql is a generated GoMock package.
package mock_sql

import (
	reflect "reflect"

	sql "github.com/g73-techchallenge-order/internal/infra/drivers/sql"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionWrapper is a mock of TransactionWrapper interface.
type MockTransactionWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionWrapperMockRecorder
}

// MockTransactionWrapperMockRecorder is the mock recorder for MockTransactionWrapper.
type MockTransactionWrapperMockRecorder struct {
	mock *MockTransactionWrapper
}

// NewMockTransactionWrapper creates a new mock instance.
func NewMockTransactionWrapper(ctrl *gomock.Controller) *MockTransactionWrapper {
	mock := &MockTransactionWrapper{ctrl: ctrl}
	mock.recorder = &MockTransactionWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionWrapper) EXPECT() *MockTransactionWrapperMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransactionWrapper) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionWrapperMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransactionWrapper)(nil).Commit))
}

// Exec mocks base method.
func (m *MockTransactionWrapper) Exec(query string, args ...any) (sql.ResultWrapper, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.ResultWrapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTransactionWrapperMockRecorder) Exec(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTransactionWrapper)(nil).Exec), varargs...)
}

// ExecWithReturn mocks base method.
func (m *MockTransactionWrapper) ExecWithReturn(query string, args ...any) sql.RowWrapper {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecWithReturn", varargs...)
	ret0, _ := ret[0].(sql.RowWrapper)
	return ret0
}

// ExecWithReturn indicates an expected call of ExecWithReturn.
func (mr *MockTransactionWrapperMockRecorder) ExecWithReturn(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecWithReturn", reflect.TypeOf((*MockTransactionWrapper)(nil).ExecWithReturn), varargs...)
}

// Find mocks base method.
func (m *MockTransactionWrapper) Find(query string, args ...any) (sql.RowsWrapper, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(sql.RowsWrapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockTransactionWrapperMockRecorder) Find(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockTransactionWrapper)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockTransactionWrapper) FindOne(query string, args ...any) sql.RowWrapper {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(sql.RowWrapper)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockTransactionWrapperMockRecorder) FindOne(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockTransactionWrapper)(nil).FindOne), varargs...)
}

// Rollback mocks base method.
func (m *MockTransactionWrapper) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionWrapperMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransactionWrapper)(nil).Rollback))
}
