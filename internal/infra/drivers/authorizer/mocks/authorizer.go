// Code generated by MockGen. DO NOT EDIT.
// Source: authorizer.go
//
// Generated by this command:
//
//	mockgen -source=authorizer.go -destination=mocks/authorizer.go
//

// Package mock_authorizer is a generated GoMock package.
package mock_authorizer

import (
	reflect "reflect"

	dto "github.com/IgorRamosBR/g73-techchallenge-order/internal/core/usecases/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// AuthorizeUser mocks base method.
func (m *MockAuthorizer) AuthorizeUser(cpf string) (dto.AuthorizerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeUser", cpf)
	ret0, _ := ret[0].(dto.AuthorizerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeUser indicates an expected call of AuthorizeUser.
func (mr *MockAuthorizerMockRecorder) AuthorizeUser(cpf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeUser", reflect.TypeOf((*MockAuthorizer)(nil).AuthorizeUser), cpf)
}
