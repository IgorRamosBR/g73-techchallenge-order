// Code generated by MockGen. DO NOT EDIT.
// Source: payment_client.go
//
// Generated by this command:
//
//	mockgen -source=payment_client.go -destination=mocks/payment_client.go
//

// Package mock_gateways is a generated GoMock package.
package mock_gateways

import (
	reflect "reflect"

	dto "github.com/IgorRamosBR/g73-techchallenge-order/internal/core/usecases/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentClient is a mock of PaymentClient interface.
type MockPaymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentClientMockRecorder
}

// MockPaymentClientMockRecorder is the mock recorder for MockPaymentClient.
type MockPaymentClientMockRecorder struct {
	mock *MockPaymentClient
}

// NewMockPaymentClient creates a new mock instance.
func NewMockPaymentClient(ctrl *gomock.Controller) *MockPaymentClient {
	mock := &MockPaymentClient{ctrl: ctrl}
	mock.recorder = &MockPaymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentClient) EXPECT() *MockPaymentClientMockRecorder {
	return m.recorder
}

// GeneratePaymentQRCode mocks base method.
func (m *MockPaymentClient) GeneratePaymentQRCode(arg0 dto.PaymentRequest) (dto.PaymentQRCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePaymentQRCode", arg0)
	ret0, _ := ret[0].(dto.PaymentQRCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePaymentQRCode indicates an expected call of GeneratePaymentQRCode.
func (mr *MockPaymentClientMockRecorder) GeneratePaymentQRCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePaymentQRCode", reflect.TypeOf((*MockPaymentClient)(nil).GeneratePaymentQRCode), arg0)
}
