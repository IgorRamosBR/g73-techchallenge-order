// Code generated by MockGen. DO NOT EDIT.
// Source: product_repository.go
//
// Generated by this command:
//
//	mockgen -source=product_repository.go -destination=mocks/product_repository.go
//

// Package mock_gateways is a generated GoMock package.
package mock_gateways

import (
	reflect "reflect"

	entities "github.com/IgorRamosBR/g73-techchallenge-order/internal/core/entities"
	dto "github.com/IgorRamosBR/g73-techchallenge-order/internal/core/usecases/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepositoryGateway is a mock of ProductRepositoryGateway interface.
type MockProductRepositoryGateway struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryGatewayMockRecorder
}

// MockProductRepositoryGatewayMockRecorder is the mock recorder for MockProductRepositoryGateway.
type MockProductRepositoryGatewayMockRecorder struct {
	mock *MockProductRepositoryGateway
}

// NewMockProductRepositoryGateway creates a new mock instance.
func NewMockProductRepositoryGateway(ctrl *gomock.Controller) *MockProductRepositoryGateway {
	mock := &MockProductRepositoryGateway{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepositoryGateway) EXPECT() *MockProductRepositoryGatewayMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockProductRepositoryGateway) DeleteProduct(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductRepositoryGatewayMockRecorder) DeleteProduct(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductRepositoryGateway)(nil).DeleteProduct), id)
}

// FindAllProducts mocks base method.
func (m *MockProductRepositoryGateway) FindAllProducts(pageParams dto.PageParams) ([]entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProducts", pageParams)
	ret0, _ := ret[0].([]entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProducts indicates an expected call of FindAllProducts.
func (mr *MockProductRepositoryGatewayMockRecorder) FindAllProducts(pageParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProducts", reflect.TypeOf((*MockProductRepositoryGateway)(nil).FindAllProducts), pageParams)
}

// FindProductById mocks base method.
func (m *MockProductRepositoryGateway) FindProductById(id int) (entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductById", id)
	ret0, _ := ret[0].(entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductById indicates an expected call of FindProductById.
func (mr *MockProductRepositoryGatewayMockRecorder) FindProductById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductById", reflect.TypeOf((*MockProductRepositoryGateway)(nil).FindProductById), id)
}

// FindProductsByCategory mocks base method.
func (m *MockProductRepositoryGateway) FindProductsByCategory(pageParams dto.PageParams, category string) ([]entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductsByCategory", pageParams, category)
	ret0, _ := ret[0].([]entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductsByCategory indicates an expected call of FindProductsByCategory.
func (mr *MockProductRepositoryGatewayMockRecorder) FindProductsByCategory(pageParams, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductsByCategory", reflect.TypeOf((*MockProductRepositoryGateway)(nil).FindProductsByCategory), pageParams, category)
}

// SaveProduct mocks base method.
func (m *MockProductRepositoryGateway) SaveProduct(product entities.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProduct indicates an expected call of SaveProduct.
func (mr *MockProductRepositoryGatewayMockRecorder) SaveProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProduct", reflect.TypeOf((*MockProductRepositoryGateway)(nil).SaveProduct), product)
}

// UpdateProduct mocks base method.
func (m *MockProductRepositoryGateway) UpdateProduct(id int, product entities.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", id, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryGatewayMockRecorder) UpdateProduct(id, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepositoryGateway)(nil).UpdateProduct), id, product)
}
